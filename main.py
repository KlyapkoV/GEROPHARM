import streamlit as st
import pandas as pd
from numerize import numerize
import plotly.express as px

# –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –°–¢–†–ê–ù–ò–¶–´

st.set_page_config(page_title='GEROPHARM', layout='wide')

st.image(r'https://gxp-academy.org/upload/medialibrary/135/m4okmfo6fqxplkozpdt54h25c8afz88z.jpg')


###############################################################################################
############################## –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–û–ì–û –î–ê–¢–ê–§–†–ï–ô–ú–ê ##############################
###############################################################################################

uploader_file = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', type='xlsx')

try:
    df = pd.read_excel(uploader_file)
except ValueError:
    pass

df['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ %'] = (df['–§–∞–∫—Ç'] / df['–ü–ª–∞–Ω'] * 100).astype(int)
df['–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º'] = (df['–§–∞–∫—Ç'] - df['–§–∞–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥']).astype(int)
df['–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤ %'] = ((df['–§–∞–∫—Ç'] / df['–§–∞–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥'] - 1) * 100).astype(int)
df['–§–∞–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥'] = df['–§–∞–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥'].astype(int)


###############################################################################################
################################ –í–´–ë–û–† –ü–†–û–î–£–ö–¢–ê –ü–û –û–¢–î–ï–õ–¨–ù–û–°–¢–ò ################################
###############################################################################################

d = st.multiselect(
                   label='–ü—Ä–æ–¥—É–∫—Ç',
                   options=df['–ü—Ä–æ–¥—É–∫—Ç—ã'].to_list(),
                   default=df['–ü—Ä–æ–¥—É–∫—Ç—ã'].to_list()
                  )

df = df.loc[(df['–ü—Ä–æ–¥—É–∫—Ç—ã'].isin(d))]


###############################################################################################
####################################### –ú–ï–¢–†–ò–ö–ò –ö–ê–†–¢–û–ß–ï–ö ######################################
###############################################################################################

# –ü–†–û–î–ê–ñ–ò –¢–ï–ö–£–©–ï–ì–û –ü–ï–†–ò–û–î–ê (–∏—Ç–æ–≥)
fact_sum = numerize.numerize(
                             int(
                                 df['–§–∞–∫—Ç'].sum()
                                )
                            )

# –ü–õ–ê–ù –ü–†–û–î–ê–ñ (–∏—Ç–æ–≥)
plan_sum = numerize.numerize(
                             int(
                                 df['–ü–ª–∞–Ω'].sum()
                                )
                            )

# –ü–†–û–î–ê–ñ–ò –ü–†–ï–î–´–î–£–©–ï–ì–û –ü–ï–†–ò–û–î–ê (–∏—Ç–æ–≥)
prev_sum = numerize.numerize(
                             int(
                                 df['–§–∞–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥'].sum()
                                )
                            )

# –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–õ–ê–ù–ê (%)
plan_execution_percent = numerize.numerize(
                                           int(
                                               (df['–§–∞–∫—Ç'].sum() / df['–ü–ª–∞–Ω'].sum()) * 100
                                              )
                                          )
# –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–õ–ê–ù–ê (–∏—Ç–æ–≥)
plan_execution = numerize.numerize(
                                   int(
                                       df['–§–∞–∫—Ç'].sum() - df['–ü–ª–∞–Ω'].sum()
                                      )
                                  )

# –ü–†–ò–†–û–°–¢ –ü–†–û–î–ê–ñ (–∏—Ç–æ–≥)
sales_growth = numerize.numerize(
                                 int(
                                     df['–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º'].sum()
                                    )
                                )

# –ü–†–ò–†–û–°–¢ –ü–†–û–î–ê–ñ (%)
sales_growth_percent = numerize.numerize(
                                         int(
                                             (df['–§–∞–∫—Ç'].sum() / df['–§–∞–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥'].sum() - 1) * 100
                                            )
                                        )


###############################################################################################
########################################## –ö–ê–†–¢–û–ß–ö–ò ###########################################
###############################################################################################

col1, col2, col3, col4 = st.columns(4)

# –ü–†–û–î–ê–ñ–ò –¢–ï–ö–£–©–ï–ì–û –ü–ï–†–ò–û–î–ê (–∏—Ç–æ–≥)
with col1:
    st.markdown(
                "<h1 style='text-align: center; color: #000000; font-size:30px;'>–§–∞–∫—Ç</h1>"
                , unsafe_allow_html=True
               )
    st.markdown(
                f"<h1 style='text-align: center; color: #008000; font-size:60px;'>{fact_sum}</h1>"
                , unsafe_allow_html=True
               )
    st.markdown(
                f"<h1 style='text-align: center; color: #808080; font-size:20px;'>—Ñ–∞–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π({prev_sum})</h1>"
                , unsafe_allow_html=True
               )

# –ü–õ–ê–ù –ü–†–û–î–ê–ñ (–∏—Ç–æ–≥)
with col2:
    st.markdown(
                "<h1 style='text-align: center; color: #000000; font-size:30px;'>–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂</h1>"
                , unsafe_allow_html=True
               )
    st.markdown(
                f"<h1 style='text-align: center; color: #000000; font-size:60px;'>{plan_sum}</h1>"
                , unsafe_allow_html=True
               )

# –í–´–ü–ê–õ–ù–ï–ù–ò–ï –ü–õ–ê–ù–ê (%)
with col3:
    st.markdown(
                "<h1 style='text-align: center; color: #000000; font-size:30px;'>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞</h1>"
                , unsafe_allow_html=True
               )
    if int(
           (df['–§–∞–∫—Ç'].sum() / df['–ü–ª–∞–Ω'].sum()) * 100
          ) >= 100:
        st.markdown(
                    f"<h1 style='text-align: center; color: #008000; font-size:60px;'>ü°Ö{plan_execution_percent} %</h1>"
                    , unsafe_allow_html=True
                   )
    else:
        st.markdown(
                    f"<h1 style='text-align: center; color: #FF8C00; font-size:60px;'>ü°á{plan_execution_percent} %</h1>"
                    , unsafe_allow_html=True
                   )
    if int(df['–§–∞–∫—Ç'].sum() - df['–ü–ª–∞–Ω'].sum()) >= 100:
        st.markdown(
                    f"<h1 style='text-align: center; color: #008000; font-size:30px;'>(ü°Ö{plan_execution})</h1>"
                    , unsafe_allow_html=True
                   )
    else:
        st.markdown(
                    f"<h1 style='text-align: center; color: #FF8C00; font-size:30px;'>(ü°á{plan_execution})</h1>"
                    , unsafe_allow_html=True
                   )

#  –ü–†–ò–†–û–°–¢ –ü–†–û–î–ê–ñ (%)
with col4:
    st.markdown(
                "<h1 style='text-align: center; color: #000000; font-size:30px;'>–ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ </h1>"
                , unsafe_allow_html=True
               )
    if int(
           (df['–§–∞–∫—Ç'].sum() / df['–§–∞–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥'].sum() - 1) * 100
          ) > 0:
        st.markdown(
                    f"<h1 style='text-align: center; color: #008000; font-size:60px;'>ü°Ö{sales_growth_percent} %</h1>"
                    , unsafe_allow_html=True
                   )
    else:
        st.markdown(
                    f"<h1 style='text-align: center; color: #FF8C00; font-size:60px;'>ü°á{sales_growth_percent} %</h1>"
                    , unsafe_allow_html=True
                   )

    if int(
            (df['–§–∞–∫—Ç'].sum() / df['–§–∞–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥'].sum() - 1) * 100
    ) > 0:
        st.markdown(
            f"<h1 style='text-align: center; color: #008000; font-size:30px;'>(ü°Ö{sales_growth})</h1>"
            , unsafe_allow_html=True
        )
    else:
        st.markdown(
                    f"<h1 style='text-align: center; color: #FF8C00; font-size:30px;'>(ü°á{sales_growth})</h1>"
                    , unsafe_allow_html=True
                   )


###############################################################################################
########################################## –ì–†–ê–§–ò–ö–ò ############################################
###############################################################################################

col1, col2 = st.columns(2)

with col1:
    fig = px.bar(
                 x=df['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ %'].sort_values(),
                 y=df['–ü—Ä–æ–¥—É–∫—Ç—ã'],
                 text=df['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ %'].sort_values().map(lambda x: '{0:1.0f}%'.format(x)),
                 color_discrete_sequence=['#008000']
                )
    fig.update_layout(
                      title={
                             'text': '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂',
                             'x': 0.5,
                             'xanchor': 'center',
                             'font_size': 30
                            },
                      uniformtext_minsize=12,
                      uniformtext_mode='hide',
                      yaxis_title=None,
                      xaxis_title=None
                     )
    fig.update_yaxes(title='', visible=True)
    fig.update_xaxes(
                     title='',
                     visible=True,
                     showticklabels=False
                    )
    fig.update_traces(textposition='outside')
    st.plotly_chart(fig, theme='streamlit', use_container_width=True)


with col2:
    fig = px.bar(
                 x=df['–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤ %'].sort_values(),
                 y=df['–ü—Ä–æ–¥—É–∫—Ç—ã'],
                 text=df['–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤ %'].sort_values().map(lambda x: '{0:1.0f}%'.format(x)),
                 color_discrete_sequence=['#008000'],
                )
    fig.update_layout(
                      title={
                             'text': '–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º',
                             'x': 0.5,
                             'xanchor': 'center',
                             'font_size': 30
                            },
                      uniformtext_minsize=12,
                      uniformtext_mode='hide',
                      yaxis_title=None,
                      xaxis_title=None
                     )

    fig.update_yaxes(title='', visible=True)
    fig.update_xaxes(
                     title='',
                     visible=True,
                     showticklabels=False
                    )
    fig.update_traces(textposition='outside')
    st.plotly_chart(fig, theme='streamlit', use_container_width=True)


df = df.sort_values('–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º', ascending=0).head(5)
fig = px.bar(
             x=df['–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º'].sort_values(),
             y=df['–ü—Ä–æ–¥—É–∫—Ç—ã'],
             text_auto=True,
             color_discrete_sequence=['#008000']
            )
fig.update_layout(
                  title={
                         'text': '–¢–æ–ø-5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø—Ä–∏—Ä–æ—Å—Ç—É',
                         'x': 0.5,
                         'xanchor': 'center',
                         'font_size': 30
                        },
                  uniformtext_minsize=15,
                  uniformtext_mode='hide',
                  yaxis_title=None,
                  xaxis_title=None
                  )
fig.update_yaxes(title='', visible=True)
fig.update_xaxes(
                 title='',
                 visible=True,
                 showticklabels=False
                )
fig.update_traces(textposition='outside')

st.plotly_chart(fig, theme='streamlit', use_container_width=True)